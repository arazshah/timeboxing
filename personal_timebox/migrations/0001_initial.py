# Generated by Django 4.2.7 on 2025-09-11 10:45

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PersonalCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category_type', models.CharField(choices=[('work', 'Work & Career'), ('health', 'Health & Fitness'), ('learning', 'Learning & Development'), ('personal', 'Personal Life'), ('hobbies', 'Hobbies & Interests'), ('finance', 'Finance & Money'), ('relationships', 'Relationships'), ('spirituality', 'Spirituality & Mindfulness'), ('travel', 'Travel & Adventure'), ('other', 'Other')], default='other', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(default='#3498db', help_text='Hex color code', max_length=7)),
                ('icon', models.CharField(default='ðŸ“‹', help_text='Emoji or icon class', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Personal Categories',
                'ordering': ['name'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='PersonalGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('target_hours_per_period', models.DecimalField(decimal_places=1, max_digits=5)),
                ('period', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], default='weekly', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='active', max_length=20)),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='personal_timebox.personalcategory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PersonalTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('priority', models.IntegerField(choices=[(1, 'Critical'), (2, 'High'), (3, 'Medium'), (4, 'Low')], default=3)),
                ('energy_level', models.CharField(choices=[('low', 'Low Energy'), ('medium', 'Medium Energy'), ('high', 'High Energy')], default='medium', max_length=10)),
                ('estimated_minutes', models.PositiveIntegerField(default=25)),
                ('actual_minutes', models.PositiveIntegerField(default=0)),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='personal_timebox.personalcategory')),
                ('goal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='personal_timebox.personalgoal')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['priority', 'due_date', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_work_duration', models.PositiveIntegerField(default=25, help_text='Default work session duration in minutes')),
                ('default_break_duration', models.PositiveIntegerField(default=5, help_text='Default break duration in minutes')),
                ('long_break_duration', models.PositiveIntegerField(default=15, help_text='Long break duration in minutes')),
                ('sessions_before_long_break', models.PositiveIntegerField(default=4, help_text='Sessions before long break')),
                ('daily_goal_sessions', models.PositiveIntegerField(default=8, help_text='Target sessions per day')),
                ('weekly_goal_hours', models.DecimalField(decimal_places=1, default=20.0, help_text='Target hours per week', max_digits=4)),
                ('enable_notifications', models.BooleanField(default=True)),
                ('notification_sound', models.BooleanField(default=True)),
                ('session_reminders', models.BooleanField(default=True)),
                ('break_reminders', models.BooleanField(default=True)),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('auto', 'Auto')], default='light', max_length=10)),
                ('show_analytics_dashboard', models.BooleanField(default=True)),
                ('compact_task_view', models.BooleanField(default=False)),
                ('share_anonymous_stats', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PersonalTimeboxSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('planned_minutes', models.PositiveIntegerField(default=25)),
                ('actual_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('outcome', models.CharField(choices=[('completed', 'Completed Successfully'), ('partial', 'Partially Completed'), ('interrupted', 'Interrupted'), ('abandoned', 'Abandoned')], default='completed', max_length=20)),
                ('focus_rating', models.IntegerField(blank=True, help_text='Rate your focus level (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('energy_before', models.IntegerField(blank=True, help_text='Energy level before session (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('energy_after', models.IntegerField(blank=True, help_text='Energy level after session (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('notes', models.TextField(blank=True, help_text='What was accomplished?')),
                ('distractions', models.TextField(blank=True, help_text='What caused distractions?')),
                ('key_insights', models.TextField(blank=True, help_text='Key learnings or insights')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='personal_timebox.personaltask')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='PersonalHabit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='daily', max_length=20)),
                ('target_per_period', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='personal_timebox.personalcategory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WeeklyReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_start_date', models.DateField()),
                ('total_sessions', models.PositiveIntegerField(default=0)),
                ('total_minutes', models.PositiveIntegerField(default=0)),
                ('average_focus_rating', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('goals_achieved', models.PositiveIntegerField(default=0)),
                ('goals_total', models.PositiveIntegerField(default=0)),
                ('biggest_wins', models.TextField(help_text='What were your biggest accomplishments this week?')),
                ('main_challenges', models.TextField(help_text='What were the main obstacles?')),
                ('lessons_learned', models.TextField(help_text='What did you learn about your productivity?')),
                ('next_week_focus', models.TextField(help_text='What will you focus on next week?')),
                ('process_improvements', models.TextField(blank=True, help_text='How can you improve your process?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-week_start_date'],
                'unique_together': {('user', 'week_start_date')},
            },
        ),
        migrations.CreateModel(
            name='HabitLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('completed', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('habit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='personal_timebox.personalhabit')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('habit', 'date')},
            },
        ),
        migrations.CreateModel(
            name='DailyReflection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('overall_productivity', models.IntegerField(help_text='Overall productivity rating (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('energy_level', models.IntegerField(help_text='Average energy level (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('mood', models.IntegerField(help_text='Overall mood (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('stress_level', models.IntegerField(help_text='Stress level (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('wins', models.TextField(help_text='What went well today?')),
                ('challenges', models.TextField(help_text='What were the main challenges?')),
                ('improvements', models.TextField(help_text='What could be improved tomorrow?')),
                ('tomorrow_focus', models.TextField(help_text='Top 3 priorities for tomorrow')),
                ('gratitude', models.TextField(blank=True, help_text='What are you grateful for?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('user', 'date')},
            },
        ),
    ]
